[int day=3; string name="Binary Diagnostic";]
--------------------------------------
[int part=1;]
--------------------------------------
#include<bits/stdc++.h>
using namespace std;
long long n=1000,l=12,n1,n0,g,gs;
string a[1005],s;
long long dtob(long long n) {
   long long d=0,b=1;
   while (n) {
      int l=n%10;
      n/=10;
      d+=l*b;
      b=b*2;
   }
   return d;
}
int main(){
	for(int i=1;i<=n;i++)cin>>a[i];
	for(int i=0;i<l;i++){
		n1=0;
		n0=0;
		for(int j=1;j<=n;j++){
			s=a[j];
			if(s[i]=='1')n1++;
			else n0++;
		}
		if(n1>n0)g=g*10+1;
		else g*=10;
	}
	
	gs=dtob(g);

	cout<<gs*(4095-gs);
	return 0;
}

--------------------------------------
[int part=2;]
--------------------------------------
#include<bits/stdc++.h>
using namespace std;
long long n=1000,l=12,n1,n0,ox,c0;
string s;
vector<string>a;
vector<string>as;
long long dtob(string n) {
   long long d=0,b=1,i=0;
   while(i<=11){
      int l=n[11-i]-'0';
      d+=l*b;
      b*=2;
      i++;
   }
   return d;
}
int main(){
	a.push_back(" ");
	as.push_back(" ");
	for(int i=1;i<=n;i++)cin>>s,a.push_back(s),as.push_back(s);
	for(int i=0;i<l;i++){
		if(a.size()==2)break;
		n1=0;
		n0=0;
		for(int j=1;j<=n;j++){
			s=a[j];
			if(s[i]=='1')n1++;
			else n0++;
		}
		if(n1>n0){
			for(int j=1;j<=n;j++){
				s=a[j];
				if(s[i]=='0')a.erase(a.begin()+j),n--,j--;
			}
		}else if(n0>n1){
			for(int j=1;j<=n;j++){
				s=a[j];
				if(s[i]=='1')a.erase(a.begin()+j),n--,j--;
			}
		}else{
			for(int j=1;j<=n;j++){
				s=a[j];
				if(s[i]=='0')a.erase(a.begin()+j),n--,j--;
			}
		}
	}
	ox=dtob(a[1]);
	n=1000;
	for(int i=0;i<l;i++){
		if(as.size()==2)break;
		n1=0;
		n0=0;
		for(int j=1;j<=n;j++){
			s=as[j];
			if(s[i]=='1')n1++;
			else n0++;
		}
		if(n1<n0){
			for(int j=1;j<=n;j++){
				s=as[j];
				if(s[i]=='0')as.erase(as.begin()+j),n--,j--;
			}
		}else if(n0<n1){
			for(int j=1;j<=n;j++){
				s=as[j];
				if(s[i]=='1')as.erase(as.begin()+j),n--,j--;
			}
		}else{
			for(int j=1;j<=n;j++){
				s=as[j];
				if(s[i]=='1')as.erase(as.begin()+j),n--,j--;
			}
		}
	}
	c0=dtob(as[1]);
	cout<<ox*c0;
	return 0;
}

